type AccountPerformance {
  moneyWeightedRor: Float!
  performance: [Performance!]!
}

"""
A task that is part of an Account Strength task list
"""
type AccountStrengthTask {
  id: ID!
  taskType: AccountStrengthTaskTypeEnum!
  title: String!
}

enum AccountStrengthTaskTypeEnum {
  """
  Complete a Course
  """
  COMPLETE_COURSE
  """
  Add a Stock
  """
  ADD_STOCK
  """
  Redeem a Points offer
  """
  REDEEM_OFFER
  """
  Make a deposit
  """
  MAKE_DEPOSIT
  """
  Open investment account
  """
  OPEN_INVESTMENT_ACCOUNT
}

type AccountSummaryCash {
  cashAvailableForTrade: Float!
  cashAvailableForWithdrawal: Float!
  cashBalance: Float!
}

type AccountSummaryEquity {
  equityPositions: [EquityPosition!]!
  equityValue: Float!
}

enum ActivityIntervalEnum {
  """
  Weekly
  """
  weekly
}

enum AddonEventTypeEnum {
  """
  An addon (stock) was added to the portfolio
  """
  ADDED
  """
  An addon (stock) was removed from the portfolio
  """
  REMOVED
}

type AddonInstrument {
  fundamentals: InstrumentFundamentals!
  inactive: Boolean!
  labels: [InstrumentLabel!]!
  logo: String
  name: String!
  symbol: String!
}

type AggregatedAddonInstrument {
  addonInstrument: AddonInstrument!
  equityPosition: EquityPosition
  marketValue: Float
  status: AggregatedAddonInstrumentStatusEnum!
  unrealizedDayPL: Float
  unrealizedDayPLPercent: Float
  unrealizedPL: Float
  unrealizedPLPercent: Float
}

enum AggregatedAddonInstrumentStatusEnum {
  """
  Owned
  """
  OWNED
  """
  Pending Buy
  """
  PENDING_BUY
  """
  Pending Sell
  """
  PENDING_SELL
}

type AggregatedCorePortfolio {
  equityPositions: [EquityPosition!]!
  marketValue: Float!
  name: String!
  status: AggregatedCorePortfolioStatusEnum!
  unrealizedDayPL: Float!
  unrealizedDayPLPercent: Float!
  unrealizedPL: Float!
  unrealizedPLPercent: Float!
}

enum AggregatedCorePortfolioStatusEnum {
  """
  Owned
  """
  OWNED
  """
  Partial Owned
  """
  PARTIAL_OWNED
  """
  Pending Buy
  """
  PENDING_BUY
}

"""
A possible solution to a question
"""
type Answer {
  """
  The answer
  """
  answer: String!
  """
  Answer identifier
  """
  id: ID!
  """
  Whether the answer is correct
  """
  isCorrect: Boolean!
  """
  Identifier for the question that the answer belongs to
  """
  questionId: ID!
}

"""
Autogenerated input type of AnswerMultipleChoiceMultipleAnswerQuestion
"""
input AnswerMultipleChoiceMultipleAnswerQuestionInput {
  userCourseLessonId: ID!
  questionId: ID!
  answerIds: [ID!]!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AnswerMultipleChoiceMultipleAnswerQuestion
"""
type AnswerMultipleChoiceMultipleAnswerQuestionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  userCourseLesson: UserCourseLesson!
}

"""
Autogenerated input type of AnswerMultipleChoiceSingleAnswerQuestion
"""
input AnswerMultipleChoiceSingleAnswerQuestionInput {
  userCourseLessonId: ID!
  questionId: ID!
  answerId: ID!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AnswerMultipleChoiceSingleAnswerQuestion
"""
type AnswerMultipleChoiceSingleAnswerQuestionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  userCourseLesson: UserCourseLesson!
}

"""
Autogenerated input type of AnswerQuestion
"""
input AnswerQuestionInput {
  userCourseLessonId: ID!
  questionId: ID!
  answerId: ID!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AnswerQuestion
"""
type AnswerQuestionPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  userCourseLesson: UserCourseLesson!
}

"""
Version 2 of Answers that supports different answer types
"""
interface AnswerV2 {
  """
  Answer identifier
  """
  id: ID!
  """
  Label to display for answer
  """
  label: String!
  """
  Identifier for the question that the answer belongs to
  """
  questionId: ID!
}

"""
App was foregrounded. Used to determine session usage
"""
input AppForegroundedInput {
  """
  When the app was foregrounded, according to the client
  """
  foregroundedAt: ISO8601DateTime!
}

"""
Autogenerated input type of AssignAddon
"""
input AssignAddonInput {
  accountId: ID!
  symbol: String!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AssignAddon
"""
type AssignAddonPayload {
  account: InvestmentAccount
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
}

"""
Autogenerated input type of AssignUser
"""
input AssignUserInput {
  userType: UserTypeEnum!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AssignUser
"""
type AssignUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  user: User
}

"""
Autogenerated input type of AttestDevice
"""
input AttestDeviceInput {
  jws: String!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of AttestDevice
"""
type AttestDevicePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  deviceAttestation: DeviceAttestation
  errors: [String!]!
}

"""
User attribution code (class code)
"""
type AttributionCode {
  code: String!
  createdAt: ISO8601DateTime!
  id: ID!
  updatedAt: ISO8601DateTime!
}

"""
An author of a course
"""
type Author {
  """
  List of social media accounts for the author
  """
  authorSocialMediaAccounts: [AuthorSocialMediaAccount!]
  """
  A short biography of the user
  """
  bio: String!
  """
  Company/organization that the author works for
  """
  companyName: String
  """
  Author identifier
  """
  id: ID!
  """
  Name of the author
  """
  name: String!
  """
  Profile image for the author
  """
  profileImageUrl: String
  """
  URL for the author's personal website
  """
  website: String
}

"""
Social media account for an author
"""
type AuthorSocialMediaAccount {
  id: ID!
  """
  The social media profile URL
  """
  profileUrl: String
  """
  The social media app
  """
  socialMediaApp: SocialMediaApp
  """
  Username/handle for the social media app
  """
  username: String!
}

enum AvailabilityStatusEnum {
  """
  Active status
  """
  ACTIVE
  """
  Inactive status
  """
  INACTIVE
}

enum AvailableCoursesSortEnum {
  """
  Sort By Course Popularity
  """
  popular
  """
  Sort By Courses Suggested for User
  """
  suggested
  """
  Sort by recently added courses
  """
  recently_added
}

"""
Users Balances
"""
type Balance {
  available: String! @deprecated(reason: "Only to keep compatibility for use with old CashBalance resolver")
  cashAvailable: String!
  cashTotal: String!
  earned: String!
  equitiesTotal: String!
  pending: String!
  total: String!
  vcBalances: [VcBalance!]!
  withdrawalAllowed: String!
  withdrawn: String!
}

type BarData {
  close: String!
  high: String!
  low: String!
  open: String!
  timestamp: String!
  volume: String!
}

"""
Autogenerated input type of CancelWithdrawalRequest
"""
input CancelWithdrawalRequestInput {
  withdrawalRequestId: ID!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CancelWithdrawalRequest
"""
type CancelWithdrawalRequestPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  withdrawalRequest: Withdrawal
}

"""
Category used to classify Channels and Courses
"""
type Category {
  """
  Category Type
  """
  categoryType: CategoryTypeEnum!
  """
  When category was created
  """
  createdAt: ISO8601DateTime!
  """
  Category emoji
  """
  emoji: String!
  """
  Category identifier
  """
  id: ID!
  """
  Category name
  """
  name: String!
  """
  Topic Categories that category belongs to
  """
  topicCategories: [TopicCategory!]
  """
  When category was updated
  """
  updatedAt: ISO8601DateTime!
}

enum CategoryTypeEnum {
  """
  Category for a Channel
  """
  CHANNEL
  """
  Category for a Course
  """
  COURSE
  """
  Category for any type
  """
  ANY
}

type ChangePaymentAccountAllowed {
  status: ChangePaymentAccountAllowedEnum!
}

enum ChangePaymentAccountAllowedEnum {
  """
  OK
  """
  OK
  """
  WithdrawalInProgress
  """
  WITHDRAWAL_IN_PROGRESS
}

type ChargedFee {
  amount: Float!
  baseAmount: Float!
  chargedAt: ISO8601DateTime!
  chargedFeeDiscounts: [ChargedFeeDiscount!]!
  description: String
  id: ID!
}

"""
The connection type for ChargedFee.
"""
type ChargedFeeConnection {
  """
  A list of edges.
  """
  edges: [ChargedFeeEdge]
  """
  A list of nodes.
  """
  nodes: [ChargedFee]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

type ChargedFeeDiscount {
  amount: Float!
  code: String!
  name: String!
}

"""
An edge in a connection.
"""
type ChargedFeeEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  """
  The item at the end of the edge.
  """
  node: ChargedFee
}

enum CompressionTypeEnum {
  """
  Daily
  """
  daily
  """
  1 minute
  """
  one_minute
  """
  5 minutes
  """
  five_minutes
  """
  30 minutes
  """
  thirty_minutes
  """
  1 hour
  """
  one_hour
  """
  Weekly
  """
  weekly
}

"""
Course for a student to learn and earn!
"""
type Course {
  """
  Authors of the course
  """
  authors: [Author!]
  """
  Banner image for Course
  """
  bannerImageUrl: String
  """
  Banner video for Course
  """
  bannerVideoUrl: String
  """
  Categories that Course is assigned to
  """
  categories: [Category!]
  """
  Identifier for channel that course belongs to
  """
  channelId: ID!
  """
  When Course was created
  """
  createdAt: ISO8601DateTime!
  """
  Course description
  """
  description: String
  """
  Course disclosure
  """
  disclosure: String
  """
  Course identifier
  """
  id: ID!
  """
  Designates course as featured
  """
  isFeatured: Boolean!
  """
  Availability status
  """
  lessonUnlockType: LessonUnlockTypeEnum!
  """
  Lessons in the course
  """
  lessons: [Lesson!]
  """
  Banner image for Course
  """
  previewImageUrl: String
  """
  Reward amount earned for completing course
  """
  rewardAmount: String
  """
  Type of reward
  """
  rewardType: RewardTypeEnum
  """
  Course sponsor
  """
  sponsor: Sponsor
  """
  Availability status
  """
  status: AvailabilityStatusEnum!
  """
  Tags that Course is assigned to
  """
  tags: [Tag!]
  """
  Number of minutes a student has to complete a course
  """
  timeLimitMinutes: Int
  """
  Course title
  """
  title: String!
  """
  When Course was last updated
  """
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Course.
"""
type CourseConnection {
  """
  A list of edges.
  """
  edges: [CourseEdge]
  """
  A list of nodes.
  """
  nodes: [Course]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type CourseEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  """
  The item at the end of the edge.
  """
  node: Course
}

"""
Input Type for creating an account
"""
input CreateAccount {
  corePortfolioId: String
  addonSymbols: [String!]
}

"""
Autogenerated input type of CreateAccount
"""
input CreateAccountInput {
  account: CreateAccount!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateAccount
"""
type CreateAccountPayload {
  account: InvestmentAccount
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
}

"""
Autogenerated input type of CreateAnalyticEvent
"""
input CreateAnalyticEventInput {
  appForegrounded: AppForegroundedInput
  trackingEvent: TrackingEventInput
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateAnalyticEvent
"""
type CreateAnalyticEventPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  result: Boolean
}

"""
Input Type for creating a beneficiary user
"""
input CreateBeneficiaryUser {
  phone: String!
  name: String
  birthdate: ISO8601Date
  ssn: String
}

"""
Autogenerated input type of CreateBeneficiaryUser
"""
input CreateBeneficiaryUserInput {
  user: CreateBeneficiaryUser!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateBeneficiaryUser
"""
type CreateBeneficiaryUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  user: User
}

"""
Input Type for creating a custodial account
"""
input CreateCustodialAccount {
  beneficiaryUserId: String!
  corePortfolioId: String
  addonSymbols: [String!]
}

"""
Autogenerated input type of CreateCustodialAccount
"""
input CreateCustodialAccountInput {
  account: CreateCustodialAccount!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateCustodialAccount
"""
type CreateCustodialAccountPayload {
  account: InvestmentAccount
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
}

"""
Input Type for creating a custodian user
"""
input CreateCustodianUser {
  email: String!
  password: String!
  registrationParams: RegistrationParams
}

"""
Autogenerated input type of CreateCustodianUser
"""
input CreateCustodianUserInput {
  user: CreateCustodianUser!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateCustodianUser
"""
type CreateCustodianUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  user: User
}

"""
Autogenerated input type of CreateDeposit
"""
input CreateDepositInput {
  amount: String!
  description: String
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateDeposit
"""
type CreateDepositPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  deposit: Deposit
  errors: [String!]!
}

"""
Autogenerated input type of CreateLinkToken
"""
input CreateLinkTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateLinkToken
"""
type CreateLinkTokenPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  plaidLinkToken: PlaidLinkToken
}

"""
Autogenerated input type of CreatePaymentAccount
"""
input CreatePaymentAccountInput {
  accountId: String
  publicToken: String
  institutionId: String
  provider: String
  providerId: String
  transferMethod: String
  accountNumber: String
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreatePaymentAccount
"""
type CreatePaymentAccountPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  paymentAccount: PaymentAccount
}

"""
Input for creating session token
"""
input CreateSessionToken {
  email: String
  password: String
  phone: String
  code: String
}

"""
Autogenerated input type of CreateSessionToken
"""
input CreateSessionTokenInput {
  user: CreateSessionToken!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateSessionToken
"""
type CreateSessionTokenPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  session: Session
}

"""
Autogenerated input type of CreateUpdateLinkToken
"""
input CreateUpdateLinkTokenInput {
  id: ID!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateUpdateLinkToken
"""
type CreateUpdateLinkTokenPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  plaidLinkToken: PlaidLinkToken
}

"""
Input Type for user of unknown type
"""
input CreateUser {
  phone: String!
  registrationParams: RegistrationParams
}

"""
Autogenerated input type of CreateUserCourse
"""
input CreateUserCourseInput {
  courseId: ID!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateUserCourse
"""
type CreateUserCoursePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  userCourse: UserCourse!
}

"""
Autogenerated input type of CreateUser
"""
input CreateUserInput {
  user: CreateUser!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Input Type for creating a user one time deposit
"""
input CreateUserOneTimeDeposit {
  amount: String!
}

"""
Autogenerated input type of CreateUserOneTimeDeposit
"""
input CreateUserOneTimeDepositInput {
  userOneTimeDeposit: CreateUserOneTimeDeposit!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateUserOneTimeDeposit
"""
type CreateUserOneTimeDepositPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  userOneTimeDeposit: UserOneTimeDeposit
}

"""
Autogenerated return type of CreateUser
"""
type CreateUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  user: User
}

"""
Input Type for creating a user profile
"""
input CreateUserProfile {
  virtualCurrencyEmojiId: String!
}

"""
Autogenerated input type of CreateUserProfile
"""
input CreateUserProfileInput {
  userProfile: CreateUserProfile!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateUserProfile
"""
type CreateUserProfilePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  userProfile: UserProfile
}

"""
Input Type for creating a recurring deposit
"""
input CreateUserRecurringDeposit {
  amount: String!
  paymentAccountId: ID
  paymentInterval: String
}

"""
Autogenerated input type of CreateUserRecurringDeposit
"""
input CreateUserRecurringDepositInput {
  recurringDeposit: CreateUserRecurringDeposit!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateUserRecurringDeposit
"""
type CreateUserRecurringDepositPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  userRecurringDeposit: UserRecurringDeposit
}

"""
Autogenerated input type of CreateWithdrawal
"""
input CreateWithdrawalInput {
  amount: String!
  description: String
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of CreateWithdrawal
"""
type CreateWithdrawalPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  withdrawalRequest: Withdrawal
}

"""
Registration code shared by beneficiary to custodian
"""
type CustodialRegistrationCode {
  code: String!
}

"""
Autogenerated input type of DeletePaymentAccount
"""
input DeletePaymentAccountInput {
  id: ID!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeletePaymentAccount
"""
type DeletePaymentAccountPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  paymentAccount: PaymentAccount
}

"""
Autogenerated input type of DeleteUserOneTimeDeposit
"""
input DeleteUserOneTimeDepositInput {
  userOneTimeDepositId: ID!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteUserOneTimeDeposit
"""
type DeleteUserOneTimeDepositPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  userOneTimeDeposit: UserOneTimeDeposit!
}

"""
Autogenerated input type of DeleteUserRecurringDeposit
"""
input DeleteUserRecurringDepositInput {
  id: ID!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DeleteUserRecurringDeposit
"""
type DeleteUserRecurringDepositPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  userRecurringDeposit: UserRecurringDeposit
}

"""
A Deposit
"""
type Deposit {
  amount: String
  customerId: ID
  description: String
  id: ID!
  referenceNumber: String
  settlementStatus: String
  transactionNumber: String
  transactionStatus: String
  type: String
}

"""
Autogenerated input type of DestroySessionToken
"""
input DestroySessionTokenInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of DestroySessionToken
"""
type DestroySessionTokenPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  session: Session
}

"""
Device Attestation
"""
type DeviceAttestation {
  advice: String
  attestedAt: ISO8601DateTime
  basicIntegrity: Boolean
  ctsProfileMatch: Boolean
  id: ID!
  nonceServer: String
}

enum EmploymentStatusEnum {
  """
  Employed
  """
  EMPLOYED
  """
  Retired
  """
  RETIRED
  """
  Student
  """
  STUDENT
  """
  Not Employed
  """
  UNEMPLOYED
  """
  Self Employed / Business Owner
  """
  SELF_EMPLOYED
}

type EquityPosition {
  availableForTradingQty: Float!
  avgPrice: Float!
  marketValue: Float!
  mktPrice: Float!
  openQty: Float!
  priorClose: Float!
  side: String!
  symbol: String!
  unrealizedDayPL: Float!
  unrealizedDayPLPercent: Float!
  unrealizedPL: Float!
  unrealizedPLPercent: Float!
}

"""
A gift card.
"""
type GiftCard {
  amount: Float!
  cardNumber: String
  claimCode: String
  customUrl: String
  expirationDate: ISO8601DateTime
  giftCardBrand: GiftCardBrand
  id: ID!
  pin: String
  """
  Unit of meausre for gift card amount (usd or percentage)
  """
  unitOfMeasure: GiftCardUnitOfMeasureEnum!
}

"""
A brand that offers gift cards.
"""
type GiftCardBrand {
  brandColor: String!
  description: String
  disclaimer: String
  """
  Small icon image url for GiftCardBrand
  """
  iconImageUrl: String
  id: ID!
  """
  Logo image url for GiftCardBrand
  """
  logoImageUrl: String
  name: String!
  redemptionInstructions: String
  shortDescription: String
  terms: String
}

enum GiftCardUnitOfMeasureEnum {
  """
  Gift card for USD (e.g. $5)
  """
  USD
  """
  Gift card for percentage discount (e.g. 20% off)
  """
  PERCENTAGE
}

"""
A Home Screen Module
"""
type HomeScreen {
  arguments: QueryArguments
  format: HomeScreenFormatEnum!
  id: ID!
  name: String!
  query: String!
}

enum HomeScreenFormatEnum {
  """
  Featured Format
  """
  featured
  """
  Circular Format for active courses in progress
  """
  circle
  """
  Horizontal Nav Format
  """
  squircle
}

"""
An ISO 8601-encoded date
"""
scalar ISO8601Date

"""
An ISO 8601-encoded datetime
"""
scalar ISO8601DateTime

type InstrumentFundamentals {
  askPrice: Float!
  bidPrice: Float!
  bookValuePerShare: Float
  cashFlowPerShare: Float
  close: Float
  closePrior: Float
  cumulativeVolume: Float
  description: String!
  dividend: Float
  dividendYield: Float
  earningsPerShare: Float
  fiftyTwoWeekHighPrice: Float
  fiftyTwoWeekLowPrice: Float
  highPrice: Float!
  lowPrice: Float!
  marketCap: Float
  name: String!
  openPrice: Float!
  operatingIncome: Float
  pbRatio: Float
  peRatio: Float
  priceMovingAverage150Day: Float
  priceMovingAverage200Day: Float
  priceMovingAverage50Day: Float
  roe: Float
  sector: String
  sharesOutstanding: Float
  symbol: String!
  volumeMovingAverage10Day: Float
  volumeMovingAverage25Day: Float
  volumeMovingAverage50Day: Float
}

type InstrumentLabel {
  emoji: String!
  label: String!
}

type InvestmentAccount {
  aggregated: InvestmentAccountAggregated
  house: Boolean!
  id: ID!
  portfolio: Portfolio!
  provisioningCompletedAt: String
  provisioningInitiatedAt: String
  status: InvestmentAccountStatusEnum
  summary: InvestmentAccountSummary
}

type InvestmentAccountAggregated {
  aggregatedAddonInstruments: [AggregatedAddonInstrument!]!
  aggregatedCorePortfolio: AggregatedCorePortfolio!
}

enum InvestmentAccountStatusEnum {
  """
  Provisioning
  """
  provisioning
  """
  Open
  """
  open
  """
  Open, No Trades
  """
  open_no_trades
  """
  Closed
  """
  closed
  """
  Failed KYC
  """
  failed_kyc
  """
  Failed Provisioning
  """
  failed_provisioning
  """
  Pending Close
  """
  pending_close
}

type InvestmentAccountSummary {
  cash: AccountSummaryCash!
  equity: AccountSummaryEquity!
}

"""
Represents untyped JSON
"""
scalar JSON

"""
Learning activity summary for the student
"""
type LearningActivitySummary {
  intervalCompletedCoursesCount: Int
  intervalRewards: Float
  lifetimeRewards: Float
}

"""
Lesson with a set of questions for the student to answer
"""
type Lesson {
  """
  When lesson was created
  """
  createdAt: ISO8601DateTime!
  """
  Lesson identifier
  """
  id: ID!
  """
  Intro cards for lessons
  """
  lessonIntroCards: [LessonIntroCard!]
  """
  The name of the lesson
  """
  name: String!
  """
  Type denoting how questions should be ordered
  """
  questionOrderType: QuestionOrderTypeEnum!
  """
  Sorting order
  """
  sortOrder: Int
  """
  Availability status
  """
  status: AvailabilityStatusEnum!
  """
  When lesson was updated
  """
  updatedAt: ISO8601DateTime!
}

"""
Intro card shown before lesson
"""
interface LessonIntroCard {
  """
  Lesson Intro Card identifier
  """
  id: ID!
  """
  Sorting order
  """
  sortOrder: Int!
  """
  Lesson Intro Card title
  """
  title: String
}

enum LessonUnlockTypeEnum {
  """
  Lessons unlock one by one
  """
  SERIAL
  """
  All lessons unlocked
  """
  PARALLEL
}

type MarketStatus {
  isOpen: Boolean!
}

"""
Multiple Choice answer.
"""
type MultipleChoiceAnswer implements AnswerV2 {
  """
  Answer identifier
  """
  id: ID!
  """
  Whether the answer is correct
  """
  isCorrect: Boolean!
  """
  Label to display for answer
  """
  label: String!
  """
  Identifier for the question that the answer belongs to
  """
  questionId: ID!
}

"""
Multiple Choice question with two or more answers.
"""
type MultipleChoiceMultipleAnswerQuestion implements QuestionV2 {
  """
  List of choice answers for the question
  """
  answers: [AnswerV2!]!
  """
  The body of the question
  """
  body: String!
  """
  The display style for the question
  """
  displayStyle: QuestionDisplayStyleEnum!
  """
  Hint to help answer the question
  """
  hint: String
  """
  Question identifier
  """
  id: ID!
  """
  Identifier for the lesson that the question belongs to
  """
  lessonId: ID!
  """
  List of info cards for the question
  """
  questionInfoCards: [QuestionInfoCard!]!
  """
  Question type
  """
  questionType: QuestionTypeEnum!
  """
  Sorting order
  """
  sortOrder: Int!
}

"""
Multiple Choice question with one answer.
"""
type MultipleChoiceSingleAnswerQuestion implements QuestionV2 {
  """
  List of choice answers for the question
  """
  answers: [AnswerV2!]!
  """
  The body of the question
  """
  body: String!
  """
  The display style for the question
  """
  displayStyle: QuestionDisplayStyleEnum!
  """
  Hint to help answer the question
  """
  hint: String
  """
  Question identifier
  """
  id: ID!
  """
  Identifier for the lesson that the question belongs to
  """
  lessonId: ID!
  """
  List of info cards for the question
  """
  questionInfoCards: [QuestionInfoCard!]!
  """
  Question type
  """
  questionType: QuestionTypeEnum!
  """
  Sorting order
  """
  sortOrder: Int!
}

"""
Mutation
"""
type Mutation {
  answerMultipleChoiceMultipleAnswerQuestion(input: AnswerMultipleChoiceMultipleAnswerQuestionInput!): AnswerMultipleChoiceMultipleAnswerQuestionPayload
  answerMultipleChoiceSingleAnswerQuestion(input: AnswerMultipleChoiceSingleAnswerQuestionInput!): AnswerMultipleChoiceSingleAnswerQuestionPayload
  answerQuestion(input: AnswerQuestionInput!): AnswerQuestionPayload
  assignAddon(input: AssignAddonInput!): AssignAddonPayload
  assignUserType(input: AssignUserInput!): AssignUserPayload
  attestDevice(input: AttestDeviceInput!): AttestDevicePayload
  cancelWithdrawalRequest(input: CancelWithdrawalRequestInput!): CancelWithdrawalRequestPayload
  createAccount(input: CreateAccountInput!): CreateAccountPayload
  createAnalyticEvent(input: CreateAnalyticEventInput!): CreateAnalyticEventPayload
  createBeneficiaryUser(input: CreateBeneficiaryUserInput!): CreateBeneficiaryUserPayload
  createCustodialAccount(input: CreateCustodialAccountInput!): CreateCustodialAccountPayload
  createCustodianUser(input: CreateCustodianUserInput!): CreateCustodianUserPayload
  createDeposit(input: CreateDepositInput!): CreateDepositPayload
  createLinkToken(input: CreateLinkTokenInput!): CreateLinkTokenPayload
  createPaymentAccount(input: CreatePaymentAccountInput!): CreatePaymentAccountPayload
  createSessionToken(input: CreateSessionTokenInput!): CreateSessionTokenPayload
  createUpdateLinkToken(input: CreateUpdateLinkTokenInput!): CreateUpdateLinkTokenPayload
  createUser(input: CreateUserInput!): CreateUserPayload
  createUserCourse(input: CreateUserCourseInput!): CreateUserCoursePayload
  createUserOneTimeDeposit(input: CreateUserOneTimeDepositInput!): CreateUserOneTimeDepositPayload
  createUserProfile(input: CreateUserProfileInput!): CreateUserProfilePayload
  createUserRecurringDeposit(input: CreateUserRecurringDepositInput!): CreateUserRecurringDepositPayload
  createWithdrawal(input: CreateWithdrawalInput!): CreateWithdrawalPayload
  deletePaymentAccount(input: DeletePaymentAccountInput!): DeletePaymentAccountPayload
  deleteUserOneTimeDeposit(input: DeleteUserOneTimeDepositInput!): DeleteUserOneTimeDepositPayload
  deleteUserRecurringDeposit(input: DeleteUserRecurringDepositInput!): DeleteUserRecurringDepositPayload
  destroySessionToken(input: DestroySessionTokenInput!): DestroySessionTokenPayload
  redeemSponsorOffer(input: RedeemSponsorOfferInput!): RedeemSponsorOfferPayload
  redeemUserFundedOffer(input: RedeemUserFundedOfferInput!): RedeemUserFundedOfferPayload
  removeAddon(input: RemoveAddonInput!): RemoveAddonPayload
  requestPhoneLoginCode(input: RequestPhoneLoginCodeInput!): RequestPhoneLoginCodePayload
  requestPhoneVerification(input: RequestPhoneVerificationInput!): RequestPhoneVerificationPayload
  resubmitAccount(input: ResubmitAccountInput!): ResubmitAccountPayload
  resubmitCustodialAccount(input: ResubmitCustodialAccountInput!): ResubmitCustodialAccountPayload
  startLesson(input: StartLessonInput!): StartLessonPayload
  updateBeneficiaryUser(input: UpdateBeneficiaryUserInput!): UpdateBeneficiaryUserPayload
  updatePaymentAccount(input: UpdatePaymentAccountInput!): UpdatePaymentAccountPayload
  updateUser(input: UpdateUserInput!): UpdateUserPayload
  updateUserAccountStrengthTask(input: UpdateUserAccountStrengthTaskInput!): UpdateUserAccountStrengthTaskPayload
  updateUserAttributionCode(input: UpdateUserAttributionCodeInput!): UpdateUserAttributionCodePayload
  updateUserOneTimeDeposit(input: UpdateUserOneTimeDepositInput!): UpdateUserOneTimeDepositPayload
  updateUserProfile(input: UpdateUserProfileInput!): UpdateUserProfilePayload
  updateUserRecurringDeposit(input: UpdateUserRecurringDepositInput!): UpdateUserRecurringDepositPayload
  validatePhoneVerification(input: ValidatePhoneVerificationInput!): ValidatePhoneVerificationPayload
}

"""
Interface for common fields across different Offer types
"""
interface Offer {
  """
  Offer description
  """
  description: String!
  """
  Offer ID
  """
  id: ID!
  """
  Flag for whether or not the user can redeem this offer
  """
  isRedeemable: Boolean!
  """
  Amount of offer rewarded to user
  """
  offerAmount: Float!
  """
  Type of offer (cash or giftcard)
  """
  offerType: OfferTypeEnum!
  """
  Unit of meausre for reward amount
  """
  offerUnitOfMeasure: OfferUnitOfMeasureEnum!
  """
  Amount of Plasma that can be applied to offer (capped at pl_cost)
  """
  plApplicable: Int!
  """
  Amount of Plasma to redeem the offer
  """
  plCost: Int!
  """
  Description displayed to user when offer is redeemable
  """
  redemptionDescription: String! @deprecated(reason: "Use description field")
  """
  Title of offer
  """
  title: String!
}

"""
The connection type for Offer.
"""
type OfferConnection {
  """
  A list of edges.
  """
  edges: [OfferEdge]
  """
  A list of nodes.
  """
  nodes: [Offer]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type OfferEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  """
  The item at the end of the edge.
  """
  node: Offer
}

enum OfferSourceEnum {
  """
  User funded
  """
  USER_FUNDED
  """
  Sponsor
  """
  SPONSOR
}

enum OfferTypeEnum {
  """
  Cash offer
  """
  CASH
  """
  Gift card offer
  """
  GIFTCARD
}

enum OfferUnitOfMeasureEnum {
  """
  Offer for USD
  """
  USD
  """
  Offer for percentage discount
  """
  PERCENTAGE
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
}

"""
A Users Payment Account
"""
type PaymentAccount {
  accountBalance: String
  accountNumber: String
  allowDeposit: Boolean
  allowWithdrawal: Boolean
  customerId: ID
  deletedAt: ISO8601DateTime
  displayAccountNumber: String
  gatewayWithdrawalFee: String
  id: ID
  name: String
  profitStarsAccountReferenceId: String
  requireReauth: Boolean
  routingNumber: String
  status: Int
  transferMethod: String
}

type Performance {
  cash: String!
  cumRealizedPL: String!
  date: String!
  deposits: String!
  equity: String!
  fees: String!
  realizedDayPL: String!
  unrealizedDayPL: String!
  withdrawals: String!
}

"""
A token to be used when linking Plaid
"""
type PlaidLinkToken {
  expiration: ISO8601DateTime
  linkToken: String
}

type Portfolio {
  addonInstruments: [AddonInstrument]
  corePortfolioId: ID!
  corePortfolioName: String!
}

type PortfolioEvent {
  """
  ID of the Account associated with the event
  """
  accountId: ID!
  addonInstrument: AddonInstrument
  """
  When the event record was created
  """
  createdAt: ISO8601DateTime!
  """
  Status of the portfolio in DriveWealth after the event
  """
  dwPortfolioStatus: JSON
  """
  The event type
  """
  eventType: AddonEventTypeEnum!
  """
  Portfolio event identifier
  """
  id: ID!
  """
  When the event was took place
  """
  initiatedAt: ISO8601DateTime!
  """
  When the event record was updated
  """
  updatedAt: ISO8601DateTime!
}

"""
The connection type for PortfolioEvent.
"""
type PortfolioEventConnection {
  """
  A list of edges.
  """
  edges: [PortfolioEventEdge]
  """
  A list of nodes.
  """
  nodes: [PortfolioEvent]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type PortfolioEventEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  """
  The item at the end of the edge.
  """
  node: PortfolioEvent
}

"""
Query
"""
type Query {
  activeUserCourses("""Returns the elements in the list that come after the specified cursor.""" after: String, """Returns the elements in the list that come before the specified cursor.""" before: String, """Returns the first _n_ elements from the list.""" first: Int, """Returns the last _n_ elements from the list.""" last: Int): UserCourseConnection
  addonInstrument(symbol: ID!): AddonInstrument
  addonInstrumentBar(symbol: ID!, period: String!, compression: CompressionTypeEnum!): [BarData!]
  addonInstruments: [AddonInstrument!]
  availableCourses(categoryId: ID, categoryIds: [ID!], isSponsored: Boolean, authorId: ID, sort: AvailableCoursesSortEnum, """Returns the elements in the list that come after the specified cursor.""" after: String, """Returns the elements in the list that come before the specified cursor.""" before: String, """Returns the first _n_ elements from the list.""" first: Int, """Returns the last _n_ elements from the list.""" last: Int): CourseConnection
  availableSponsorOfferGroups: [SponsorOfferGroup!] @deprecated(reason: "Only supports cash offers. Use availableSponsorOfferGroupsV2")
  availableSponsorOfferGroupsV2: [SponsorOfferGroupV2!]
  availableUserFundedOfferGroups: [UserFundedOfferGroup!]
  balance: Balance
  cashBalance(total: Boolean, available: Boolean, pending: Boolean, earned: Boolean, withdrawn: Boolean, vcBalances: Boolean): Balance @deprecated(reason: "Use Balance")
  changePaymentAccountAllowed: ChangePaymentAccountAllowed!
  chargedFees("""Returns the elements in the list that come after the specified cursor.""" after: String, """Returns the elements in the list that come before the specified cursor.""" before: String, """Returns the first _n_ elements from the list.""" first: Int, """Returns the last _n_ elements from the list.""" last: Int): ChargedFeeConnection
  course(courseId: ID!): Course
  custodialRegistrationCode(code: String!): CustodialRegistrationCode
  deviceAttestation: DeviceAttestation
  featuredCourses: [Course!]
  homeScreenModules: [HomeScreen!]
  investmentAccountPerformance(accountId: ID!, """Used for relative date range, accepts a number and a unit of time (E.g: 3d - 3 Days, 2w - 2 Weeks, 1m - 1 Month)""" period: String): [Performance!]
  investmentAccountPerformanceAggregated(accountId: ID!, """Used for relative date range, accepts a number and a unit of time (E.g: 3d - 3 Days, 2w - 2 Weeks, 1m - 1 Month)""" period: String): AccountPerformance
  investmentAccounts: [InvestmentAccount!]
  learningActivitySummary(interval: ActivityIntervalEnum = """weekly"""): LearningActivitySummary
  marketStatus: MarketStatus
  paymentAccount(id: ID!): PaymentAccount
  paymentAccounts(linked: Boolean, limit: Int, page: Int): [PaymentAccount!]
  pendingUserOneTimeDeposit: UserOneTimeDeposit
  pendingUserRewards("""Returns the elements in the list that come after the specified cursor.""" after: String, """Returns the elements in the list that come before the specified cursor.""" before: String, """Returns the first _n_ elements from the list.""" first: Int, """Returns the last _n_ elements from the list.""" last: Int): UserRewardConnection @deprecated(reason: "Use UserRewards(pending: true)")
  portfolioEvents(accountId: ID!, eventType: AddonEventTypeEnum, """Returns the elements in the list that come after the specified cursor.""" after: String, """Returns the elements in the list that come before the specified cursor.""" before: String, """Returns the first _n_ elements from the list.""" first: Int, """Returns the last _n_ elements from the list.""" last: Int): PortfolioEventConnection
  reauthPaymentAccountToken(paymentAccountId: String!): Reauth
  sessionLastActiveAt: ISO8601DateTime
  statementUrl(accountId: ID!, fileKey: String!): String
  statementsConfirms(accountId: ID!, startDate: String, endDate: String): [Statement!]
  statementsMonthly(accountId: ID!, startDate: String, endDate: String): [Statement!]
  statementsTaxforms(accountId: ID!, startDate: String, endDate: String): [Statement!]
  topics("""Returns the elements in the list that come after the specified cursor.""" after: String, """Returns the elements in the list that come before the specified cursor.""" before: String, """Returns the first _n_ elements from the list.""" first: Int, """Returns the last _n_ elements from the list.""" last: Int): TopicConnection
  transaction(id: ID!): Transaction
  transactions(type: String, transactionNumber: ID, """Returns the elements in the list that come after the specified cursor.""" after: String, """Returns the elements in the list that come before the specified cursor.""" before: String, """Returns the first _n_ elements from the list.""" first: Int, """Returns the last _n_ elements from the list.""" last: Int): TransactionConnection
  user: User
  userAccountStrengthTasks: [UserAccountStrengthTask!]
  userCourse(userCourseId: ID!): UserCourse
  userCourseForUserAndCourse(courseId: ID!): UserCourse
  userCourseLesson(userCourseLessonId: ID!): UserCourseLesson
  userGiftCard(userGiftCardId: ID!): UserGiftCard
  userOfferRedemptions(all: Boolean, pending: Boolean, fulfilled: Boolean, """Returns the elements in the list that come after the specified cursor.""" after: String, """Returns the elements in the list that come before the specified cursor.""" before: String, """Returns the first _n_ elements from the list.""" first: Int, """Returns the last _n_ elements from the list.""" last: Int): UserOfferRedemptionConnection
  userRecurringDeposits("""Returns the elements in the list that come after the specified cursor.""" after: String, """Returns the elements in the list that come before the specified cursor.""" before: String, """Returns the first _n_ elements from the list.""" first: Int, """Returns the last _n_ elements from the list.""" last: Int): UserRecurringDepositConnection!
  userRewards(all: Boolean, pending: Boolean, fulfilled: Boolean, """Returns the elements in the list that come after the specified cursor.""" after: String, """Returns the elements in the list that come before the specified cursor.""" before: String, """Returns the first _n_ elements from the list.""" first: Int, """Returns the last _n_ elements from the list.""" last: Int): UserRewardConnection
  virtualCurrencyEmojis: [VirtualCurrencyEmoji!]
  withdrawalRequests("""Returns the elements in the list that come after the specified cursor.""" after: String, """Returns the elements in the list that come before the specified cursor.""" before: String, """Returns the first _n_ elements from the list.""" first: Int, """Returns the last _n_ elements from the list.""" last: Int): WithdrawalConnection
}

"""
Any Query Arguments that could govern a UI Module
"""
type QueryArguments {
  authorId: ID
  categoryId: ID
  isSponsored: Boolean
  sort: AvailableCoursesSortEnum
}

"""
A question, to test a student's knowledge
"""
type Question {
  """
  List of choice answers for the question
  """
  answers: [Answer!]!
  """
  The body of the question
  """
  body: String!
  """
  Hint to help answer the question
  """
  hint: String!
  """
  Question identifier
  """
  id: ID!
  """
  Identifier for the lesson that the question belongs to
  """
  lessonId: ID!
  """
  Sort order question appear in lesson
  """
  sortOrder: Int!
  """
  Title of the question
  """
  title: String!
}

enum QuestionDisplayStyleEnum {
  """
  The default display style
  """
  default
}

"""
Info card shown before question
"""
interface QuestionInfoCard {
  """
  Type of question intro card
  """
  cardType: QuestionInfoCardTypeEnum!
  """
  When question info card was created
  """
  createdAt: ISO8601DateTime!
  """
  Question Info Card identifier
  """
  id: ID!
  """
  Question identifier
  """
  questionId: ID!
  """
  Sorting order
  """
  sortOrder: Int!
  """
  Availability status
  """
  status: AvailabilityStatusEnum!
  """
  Question Info card title
  """
  title: String
  """
  When question info card was updated
  """
  updatedAt: ISO8601DateTime!
}

enum QuestionInfoCardTypeEnum {
  """
  Text question info card
  """
  text
}

enum QuestionOrderTypeEnum {
  """
  Questions are ordered
  """
  SERIAL
  """
  Questions are random
  """
  RANDOM
}

enum QuestionTypeEnum {
  """
  A multiple choice question with one answer
  """
  multiple_choice_single_answer
  """
  A multiple choice question with many answers
  """
  multiple_choice_multiple_answer
  """
  A true or false question
  """
  true_or_false
  """
  A numerical slider question
  """
  numerical_slider
  """
  A category sorting question
  """
  categorization
  """
  A fill in the blank question
  """
  fill_in_the_blank
}

"""
Version 2 of Questions that supports different question types
"""
interface QuestionV2 {
  """
  List of choice answers for the question
  """
  answers: [AnswerV2!]!
  """
  The body of the question
  """
  body: String!
  """
  The display style for the question
  """
  displayStyle: QuestionDisplayStyleEnum!
  """
  Hint to help answer the question
  """
  hint: String
  """
  Question identifier
  """
  id: ID!
  """
  Identifier for the lesson that the question belongs to
  """
  lessonId: ID!
  """
  List of info cards for the question
  """
  questionInfoCards: [QuestionInfoCard!]!
  """
  Question type
  """
  questionType: QuestionTypeEnum!
  """
  Sorting order
  """
  sortOrder: Int!
}

"""
A Plaid Reauth public access token
"""
type Reauth {
  publicAccessToken: ID!
}

"""
Autogenerated input type of RedeemSponsorOffer
"""
input RedeemSponsorOfferInput {
  sponsorOfferId: ID!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of RedeemSponsorOffer
"""
type RedeemSponsorOfferPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  userOfferRedemption: UserOfferRedemption
}

"""
Autogenerated input type of RedeemUserFundedOffer
"""
input RedeemUserFundedOfferInput {
  userFundedOfferId: ID!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of RedeemUserFundedOffer
"""
type RedeemUserFundedOfferPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  userOfferRedemption: UserOfferRedemption
}

"""
Registration Params Input Object
"""
input RegistrationParams {
  custodialRegistrationCode: String!
}

"""
Autogenerated input type of RemoveAddon
"""
input RemoveAddonInput {
  accountId: ID!
  symbol: String!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of RemoveAddon
"""
type RemoveAddonPayload {
  account: InvestmentAccount
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
}

"""
Autogenerated input type of RequestPhoneLoginCode
"""
input RequestPhoneLoginCodeInput {
  phone: String!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of RequestPhoneLoginCode
"""
type RequestPhoneLoginCodePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
}

"""
Autogenerated input type of RequestPhoneVerification
"""
input RequestPhoneVerificationInput {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of RequestPhoneVerification
"""
type RequestPhoneVerificationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
}

"""
Autogenerated input type of ResubmitAccount
"""
input ResubmitAccountInput {
  accountId: ID!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ResubmitAccount
"""
type ResubmitAccountPayload {
  account: InvestmentAccount
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
}

"""
Autogenerated input type of ResubmitCustodialAccount
"""
input ResubmitCustodialAccountInput {
  accountId: ID!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ResubmitCustodialAccount
"""
type ResubmitCustodialAccountPayload {
  account: InvestmentAccount
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
}

enum RewardTypeEnum {
  """
  United States Dollar
  """
  usd
  """
  Plasma
  """
  pl
}

"""
A user session
"""
type Session {
  token: String
}

"""
Social media app/platform used by a course author
"""
type SocialMediaApp {
  """
  The app icon URL
  """
  iconUrl: String
  """
  Unique identifier
  """
  id: ID!
  """
  Name of the app/platform
  """
  name: String!
  """
  The base URL of the app to be used for building the profile url
  """
  url: String!
}

"""
Course sponsor who pays out the reward in exchange for advertisement
"""
type Sponsor {
  """
  Sponsor brand color
  """
  brandColor: String
  """
  Sponsor identifier
  """
  id: ID!
  """
  Logo image for Sponsor
  """
  logoImageUrl: String
  """
  Sponsor name
  """
  name: String!
}

"""
A gift card offer funded by a sponsor
"""
type SponsorGiftCardOfferType implements Offer {
  """
  Offer description
  """
  description: String!
  """
  Gift card brand details
  """
  giftCardBrand: GiftCardBrand!
  """
  Offer ID
  """
  id: ID!
  """
  Flag for whether or not the user can redeem this offer
  """
  isRedeemable: Boolean!
  """
  Amount of offer rewarded to user
  """
  offerAmount: Float!
  """
  Type of offer (cash or giftcard)
  """
  offerType: OfferTypeEnum!
  """
  Unit of meausre for reward amount
  """
  offerUnitOfMeasure: OfferUnitOfMeasureEnum!
  """
  Amount of Plasma that can be applied to offer (capped at pl_cost)
  """
  plApplicable: Int!
  """
  Amount of Plasma to redeem the offer
  """
  plCost: Int!
  """
  Description displayed to user when offer is redeemable
  """
  redemptionDescription: String! @deprecated(reason: "Use description field")
  """
  Offer sponsor
  """
  sponsor: Sponsor!
  """
  Title of offer
  """
  title: String!
}

"""
A offer funded by a sponsor
"""
type SponsorOffer implements Offer {
  """
  Offer description
  """
  description: String!
  """
  Offer ID
  """
  id: ID!
  """
  Flag for whether or not the user can redeem this offer
  """
  isRedeemable: Boolean!
  """
  Amount of offer rewarded to user
  """
  offerAmount: Float!
  """
  Type of offer (cash or giftcard)
  """
  offerType: OfferTypeEnum!
  """
  Unit of meausre for reward amount
  """
  offerUnitOfMeasure: OfferUnitOfMeasureEnum!
  """
  Amount of Plasma that can be applied to offer (capped at pl_cost)
  """
  plApplicable: Int!
  """
  Amount of Plasma to redeem the offer
  """
  plCost: Int!
  """
  Description displayed to user when offer is redeemable
  """
  redemptionDescription: String! @deprecated(reason: "Use description field")
  """
  Offer sponsor
  """
  sponsor: Sponsor!
  """
  Title of offer
  """
  title: String!
}

"""
The connection type for SponsorOffer.
"""
type SponsorOfferConnection {
  """
  A list of edges.
  """
  edges: [SponsorOfferEdge]
  """
  A list of nodes.
  """
  nodes: [SponsorOffer]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type SponsorOfferEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  """
  The item at the end of the edge.
  """
  node: SponsorOffer
}

"""
A group of sponsor offers.
"""
type SponsorOfferGroup {
  """
  ID for SponsorOfferGroup
  """
  id: ID!
  """
  Sponsor cash offers
  """
  sponsorOffers("""Returns the elements in the list that come after the specified cursor.""" after: String, """Returns the elements in the list that come before the specified cursor.""" before: String, """Returns the first _n_ elements from the list.""" first: Int, """Returns the last _n_ elements from the list.""" last: Int): SponsorOfferConnection!
}

"""
A group of sponsor offers.
"""
type SponsorOfferGroupV2 {
  """
  ID for SponsorOfferGroup
  """
  id: ID!
  """
  Offers
  """
  sponsorOffers("""Returns the elements in the list that come after the specified cursor.""" after: String, """Returns the elements in the list that come before the specified cursor.""" before: String, """Returns the first _n_ elements from the list.""" first: Int, """Returns the last _n_ elements from the list.""" last: Int): OfferConnection!
}

"""
Autogenerated input type of StartLesson
"""
input StartLessonInput {
  userCourseLessonId: ID!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of StartLesson
"""
type StartLessonPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  userCourseLesson: UserCourseLesson!
}

type Statement {
  displayName: String!
  fileKey: ID!
}

"""
Tag in which courses are assigned to
"""
type Tag {
  """
  Tag identifier
  """
  id: ID!
  """
  Tag name
  """
  name: String!
}

"""
Text Intro card shown before lesson
"""
type TextLessonIntroCard implements LessonIntroCard {
  """
  Body of text for card
  """
  body: String!
  """
  Lesson Intro Card identifier
  """
  id: ID!
  """
  Sorting order
  """
  sortOrder: Int!
  """
  Lesson Intro Card title
  """
  title: String
}

"""
Text info card shown before question
"""
type TextQuestionInfoCard implements QuestionInfoCard {
  """
  Body of text for card
  """
  body: String!
  """
  Type of question intro card
  """
  cardType: QuestionInfoCardTypeEnum!
  """
  When question info card was created
  """
  createdAt: ISO8601DateTime!
  """
  Question Info Card identifier
  """
  id: ID!
  """
  Question identifier
  """
  questionId: ID!
  """
  Sorting order
  """
  sortOrder: Int!
  """
  Availability status
  """
  status: AvailabilityStatusEnum!
  """
  Question Info card title
  """
  title: String
  """
  When question info card was updated
  """
  updatedAt: ISO8601DateTime!
}

"""
Topic used to group categories for course discovery
"""
type Topic {
  """
  Attribution partner that this Topic is associated with (null for default list)
  """
  attributionPartnerCode: String
  """
  String identifier for topic
  """
  code: String!
  """
  When Category was created
  """
  createdAt: ISO8601DateTime!
  """
  Topic identifier
  """
  id: ID!
  """
  Logo image URL for topic
  """
  logoUrl: String
  """
  Sort order for ordering topic list
  """
  sortOrder: Int!
  """
  Availability status
  """
  status: AvailabilityStatusEnum!
  """
  Topic title
  """
  title: String!
  """
  Categories associated with this topic
  """
  topicCategories: [TopicCategory!]
  """
  When Category was updated
  """
  updatedAt: ISO8601DateTime!
}

"""
Category associated with a topic
"""
type TopicCategory {
  """
  Category
  """
  category: Category!
  """
  Category identifier
  """
  categoryId: ID!
  """
  When Category was created
  """
  createdAt: ISO8601DateTime!
  """
  Topic category identifier
  """
  id: ID!
  """
  Flag for whether or not to display in category filter list
  """
  isFilterable: Boolean!
  """
  Sort order for ordering topic list
  """
  sortOrder: Int!
  """
  Topic
  """
  topic: Topic!
  """
  Topic identifier
  """
  topicId: ID!
  """
  When Category was updated
  """
  updatedAt: ISO8601DateTime!
}

"""
The connection type for Topic.
"""
type TopicConnection {
  """
  A list of edges.
  """
  edges: [TopicEdge]
  """
  A list of nodes.
  """
  nodes: [Topic]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type TopicEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  """
  The item at the end of the edge.
  """
  node: Topic
}

"""
An App Tracking Event
"""
input TrackingEventInput {
  """
  The Name of the Event
  """
  name: String!
  """
  When the event occured, according to the client
  """
  timestamp: ISO8601DateTime!
  """
  unstructured data
  """
  data: JSON
}

"""
A Financial Transaction (Deposit/Withdrawal)
"""
type Transaction {
  amount: String
  createdAt: ISO8601DateTime
  customerId: ID
  description: String
  id: ID!
  referenceNumber: String
  settlementStatus: String
  source: String
  transactionNumber: String
  transactionStatus: String
  type: String
}

"""
The connection type for Transaction.
"""
type TransactionConnection {
  """
  A list of edges.
  """
  edges: [TransactionEdge]
  """
  A list of nodes.
  """
  nodes: [Transaction]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type TransactionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  """
  The item at the end of the edge.
  """
  node: Transaction
}

"""
Autogenerated input type of UpdateBeneficiaryUser
"""
input UpdateBeneficiaryUserInput {
  beneficiaryUserId: ID!
  user: UpdateUser!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateBeneficiaryUser
"""
type UpdateBeneficiaryUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  user: User
}

"""
Autogenerated input type of UpdatePaymentAccount
"""
input UpdatePaymentAccountInput {
  id: ID
  requireReauth: Boolean
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdatePaymentAccount
"""
type UpdatePaymentAccountPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  paymentAccount: PaymentAccount
}

"""
Input for updating a user
"""
input UpdateUser {
  email: String
  name: String
  phone: String
  birthdate: ISO8601Date
  address1: String
  address2: String
  city: String
  province: String
  postalCode: String
  country: String
  citizenshipCountry: String
  employmentStatus: EmploymentStatusEnum
  broker: Boolean
  directorOf: String
  politicallyExposedNames: String
  registrationCompletedAt: String
  last4Ssn: String
  ssn: String
}

"""
Autogenerated input type of UpdateUserAccountStrengthTask
"""
input UpdateUserAccountStrengthTaskInput {
  userAccountStrengthTaskId: ID!
  isCompletedNotficationSeen: Boolean
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateUserAccountStrengthTask
"""
type UpdateUserAccountStrengthTaskPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  userAccountStrengthTask: UserAccountStrengthTask!
}

"""
Autogenerated input type of UpdateUserAttributionCode
"""
input UpdateUserAttributionCodeInput {
  code: String!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateUserAttributionCode
"""
type UpdateUserAttributionCodePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  success: Boolean
}

"""
Autogenerated input type of UpdateUser
"""
input UpdateUserInput {
  user: UpdateUser!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Input Type for updating a user one time deposit
"""
input UpdateUserOneTimeDeposit {
  id: String!
  amount: String
  scheduledAt: ISO8601DateTime
}

"""
Autogenerated input type of UpdateUserOneTimeDeposit
"""
input UpdateUserOneTimeDepositInput {
  userOneTimeDeposit: UpdateUserOneTimeDeposit!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateUserOneTimeDeposit
"""
type UpdateUserOneTimeDepositPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  userOneTimeDeposit: UserOneTimeDeposit
}

"""
Autogenerated return type of UpdateUser
"""
type UpdateUserPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  user: User
}

"""
Input Type for updating a user profile
"""
input UpdateUserProfile {
  virtualCurrencyEmojiId: String
  isJuniorAchievement: Boolean
}

"""
Autogenerated input type of UpdateUserProfile
"""
input UpdateUserProfileInput {
  userProfile: UpdateUserProfile!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateUserProfile
"""
type UpdateUserProfilePayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  userProfile: UserProfile
}

"""
Input Type for updating a recurring deposit
"""
input UpdateUserRecurringDeposit {
  id: ID!
  paymentAccountId: ID
  amount: String
  paymentInterval: String
  deletedAt: ISO8601DateTime
}

"""
Autogenerated input type of UpdateUserRecurringDeposit
"""
input UpdateUserRecurringDepositInput {
  recurringDeposit: UpdateUserRecurringDeposit!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of UpdateUserRecurringDeposit
"""
type UpdateUserRecurringDepositPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  userRecurringDeposit: UserRecurringDeposit
}

"""
A User
"""
type User {
  address1: String
  address2: String!
  attributionCode: AttributionCode
  balance(total: Boolean, available: Boolean, pending: Boolean, earned: Boolean, withdrawn: Boolean, vcBalances: Boolean): Balance @deprecated(reason: "Use CashBalance")
  bannedAt: ISO8601DateTime
  beneficiaries: [User!]
  birthdate: ISO8601Date!
  broker: Boolean
  cashBalance(total: Boolean, available: Boolean, pending: Boolean, earned: Boolean, withdrawn: Boolean, vcBalances: Boolean): Balance
  citizenshipCountry: String
  city: String
  country: String
  custodialRegistrationCode: String
  custodian: User
  directorOf: String
  email: String
  employmentStatus: EmploymentStatusEnum
  id: ID
  investmentAccounts: [InvestmentAccount!]
  """
  User metadata
  """
  metadata: UserMetadata
  name: String
  paymentAccounts(linked: Boolean, limit: Int, page: Int): [PaymentAccount!]
  phone: String
  phoneVerificationStatus: UserPhoneVerificationStatus
  politicallyExposedNames: String
  postalCode: String
  province: String
  recurringDeposits("""Returns the elements in the list that come after the specified cursor.""" after: String, """Returns the elements in the list that come before the specified cursor.""" before: String, """Returns the first _n_ elements from the list.""" first: Int, """Returns the last _n_ elements from the list.""" last: Int): UserRecurringDepositConnection!
  registrationCompletedAt: ISO8601DateTime
  ssn: String
  token: String
  transactions(type: String, transactionNumber: ID, """Returns the elements in the list that come after the specified cursor.""" after: String, """Returns the elements in the list that come before the specified cursor.""" before: String, """Returns the first _n_ elements from the list.""" first: Int, """Returns the last _n_ elements from the list.""" last: Int): TransactionConnection
  userCourses(isCompleted: Boolean, """Returns the elements in the list that come after the specified cursor.""" after: String, """Returns the elements in the list that come before the specified cursor.""" before: String, """Returns the first _n_ elements from the list.""" first: Int, """Returns the last _n_ elements from the list.""" last: Int): UserCourseConnection
  userProfile: UserProfile
  userType: UserTypeEnum
}

"""
A task for a user
"""
type UserAccountStrengthTask {
  accountStrengthTask: AccountStrengthTask!
  completedAt: ISO8601DateTime
  completedNotificationSeenAt: ISO8601DateTime
  id: ID!
  sortOrder: Int!
}

"""
A course started by a user
"""
type UserCourse {
  """
  When the course was completed
  """
  completedAt: ISO8601DateTime
  """
  The course referenced by course_id
  """
  course: Course
  """
  ID of the course
  """
  courseId: ID!
  """
  When the course expires
  """
  expiresAt: ISO8601DateTime
  """
  User course identifier
  """
  id: ID!
  """
  Percentage of lesson completed for course
  """
  percentageComplete: Float!
  """
  Reward amount to be earned after completing the course
  """
  rewardAmount: String
  """
  Type of reward
  """
  rewardType: RewardTypeEnum
  """
  When the course was started
  """
  startedAt: ISO8601DateTime
  """
  The list of lessons in the course
  """
  userCourseLessons: [UserCourseLesson!]
  """
  ID of the user
  """
  userId: ID!
}

"""
The connection type for UserCourse.
"""
type UserCourseConnection {
  """
  A list of edges.
  """
  edges: [UserCourseEdge]
  """
  A list of nodes.
  """
  nodes: [UserCourse]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserCourseEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  """
  The item at the end of the edge.
  """
  node: UserCourse
}

"""
A lesson for a course that has been started by a user
"""
type UserCourseLesson {
  """
  When the lesson was completed
  """
  completedAt: ISO8601DateTime
  """
  Unique identifier
  """
  id: ID!
  """
  Whether the lesson is locked
  """
  isLocked: Boolean!
  """
  The lesson object
  """
  lesson: Lesson!
  """
  Percentage of questions answered for lesson
  """
  percentageComplete: Float!
  """
  Type denoting how questions should be ordered
  """
  questionOrderType: QuestionOrderTypeEnum!
  """
  The sort order
  """
  sortOrder: Int
  """
  When the lesson was started
  """
  startedAt: ISO8601DateTime
  """
  The unique ID of the user course
  """
  userCourseId: ID!
  userCourseLessonQuestions: [UserCourseLessonQuestion!]!
  userCourseLessonQuestionsV2: [UserCourseLessonQuestionV2!]!
}

"""
A question for a lesson that has been started by a user
"""
type UserCourseLessonQuestion {
  """
  Unique identifier
  """
  id: ID!
  isAnswered: Boolean!
  question: Question!
  """
  Sort order question appear in lesson
  """
  sortOrder: Int!
}

"""
A question for a lesson that has been started by a user
"""
type UserCourseLessonQuestionV2 {
  """
  Unique identifier
  """
  id: ID!
  isAnswered: Boolean!
  questionV2: QuestionV2!
  """
  Sort order question appear in lesson
  """
  sortOrder: Int!
}

"""
A offer funded by a user
"""
type UserFundedOffer implements Offer {
  """
  Offer description
  """
  description: String!
  fundingUser: User!
  """
  Offer ID
  """
  id: ID!
  """
  Flag for whether or not the user can redeem this offer
  """
  isRedeemable: Boolean!
  """
  Amount of offer rewarded to user
  """
  offerAmount: Float!
  """
  Type of offer (cash or giftcard)
  """
  offerType: OfferTypeEnum!
  """
  Unit of meausre for reward amount
  """
  offerUnitOfMeasure: OfferUnitOfMeasureEnum!
  """
  Amount of Plasma that can be applied to offer (capped at pl_cost)
  """
  plApplicable: Int!
  """
  Amount of Plasma to redeem the offer
  """
  plCost: Int!
  """
  Description displayed to user when offer is redeemable
  """
  redemptionDescription: String! @deprecated(reason: "Use description field")
  """
  Title of offer
  """
  title: String!
  user: User!
}

"""
The connection type for UserFundedOffer.
"""
type UserFundedOfferConnection {
  """
  A list of edges.
  """
  edges: [UserFundedOfferEdge]
  """
  A list of nodes.
  """
  nodes: [UserFundedOffer]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserFundedOfferEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  """
  The item at the end of the edge.
  """
  node: UserFundedOffer
}

"""
A group of user funded offers. Grouped by the funding user.
"""
type UserFundedOfferGroup {
  fundingUserId: ID!
  id: ID!
  userFundedOffers("""Returns the elements in the list that come after the specified cursor.""" after: String, """Returns the elements in the list that come before the specified cursor.""" before: String, """Returns the first _n_ elements from the list.""" first: Int, """Returns the last _n_ elements from the list.""" last: Int): UserFundedOfferConnection!
}

"""
A gift card assigned to a user.
"""
type UserGiftCard {
  giftCard: GiftCard!
  id: ID!
  user: User!
}

type UserMetadata {
  """
  No. of correct consecutive answers
  """
  streak: Int
}

"""
A redemption of an offer by a user
"""
type UserOfferRedemption {
  """
  Date when the offer redemption was created
  """
  createdAt: ISO8601DateTime
  """
  The redemption ID
  """
  id: ID!
  """
  The amount (USD) awarded to the user
  """
  offerAmount: Float
  """
  Date when the offer was fulfilled
  """
  offerFulfilledAt: ISO8601DateTime
  """
  The source of the offer (user_funded or sponsor)
  """
  offerSource: OfferSourceEnum
  """
  ID of the offer that has been redeemed
  """
  offerSourceEntityId: ID
  """
  ID of the transaction that fulfilled the offer
  """
  offerTransactionId: ID
  """
  Type of redeemed offer
  """
  offerType: OfferTypeEnum!
  """
  The amount of Plasma used to redeem the offer
  """
  plCost: Int
  """
  Date when the offer was redeemed
  """
  plRedeemedAt: ISO8601DateTime
  """
  The transaction ID for the Plasma withdrawal
  """
  plRedemptionTransactionId: ID
  """
  ID of the user that made the redemption
  """
  userId: ID
}

"""
The connection type for UserOfferRedemption.
"""
type UserOfferRedemptionConnection {
  """
  A list of edges.
  """
  edges: [UserOfferRedemptionEdge]
  """
  A list of nodes.
  """
  nodes: [UserOfferRedemption]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserOfferRedemptionEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  """
  The item at the end of the edge.
  """
  node: UserOfferRedemption
}

"""
A user one time deposit
"""
type UserOneTimeDeposit {
  amount: String!
  createdAt: ISO8601DateTime!
  deletedAt: ISO8601DateTime
  depositCreatedAt: ISO8601DateTime
  description: String!
  id: ID!
  scheduledAt: ISO8601DateTime
  transactionId: ID
  updatedAt: ISO8601DateTime!
  userId: ID!
}

"""
Phone Verification Status
"""
enum UserPhoneVerificationStatus {
  verified
  unverified
}

"""
A user profile
"""
type UserProfile {
  createdAt: ISO8601DateTime!
  id: ID!
  isJuniorAchievement: Boolean!
  updatedAt: ISO8601DateTime!
  userId: ID!
  virtualCurrencyEmoji: VirtualCurrencyEmoji!
}

"""
A Users recurring deposit configuration
"""
type UserRecurringDeposit {
  amount: Float
  createdAt: ISO8601DateTime
  deactivatedAt: ISO8601DateTime
  deletedAt: ISO8601DateTime
  id: ID
  paymentAccountId: ID
  paymentInterval: String
  scheduledAt: ISO8601DateTime
  updatedAt: ISO8601DateTime
  userId: ID
}

"""
The connection type for UserRecurringDeposit.
"""
type UserRecurringDepositConnection {
  """
  A list of edges.
  """
  edges: [UserRecurringDepositEdge]
  """
  A list of nodes.
  """
  nodes: [UserRecurringDeposit]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserRecurringDepositEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  """
  The item at the end of the edge.
  """
  node: UserRecurringDeposit
}

"""
A user reward
"""
type UserReward {
  course: Course
  createdAt: ISO8601DateTime!
  description: String!
  rewardAmount: String!
  rewardType: RewardTypeEnum!
  source: String!
  updatedAt: ISO8601DateTime!
  userId: ID!
}

"""
The connection type for UserReward.
"""
type UserRewardConnection {
  """
  A list of edges.
  """
  edges: [UserRewardEdge]
  """
  A list of nodes.
  """
  nodes: [UserReward]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type UserRewardEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  """
  The item at the end of the edge.
  """
  node: UserReward
}

enum UserTypeEnum {
  """
  A beneficiary user
  """
  beneficiary
  """
  A user who can be a custodian for beneficiary user
  """
  custodian
  """
  An individual investor
  """
  individual
}

"""
Autogenerated input type of ValidatePhoneVerification
"""
input ValidatePhoneVerificationInput {
  token: String!
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
}

"""
Autogenerated return type of ValidatePhoneVerification
"""
type ValidatePhoneVerificationPayload {
  """
  A unique identifier for the client performing the mutation.
  """
  clientMutationId: String
  errors: [String!]!
  success: Boolean
}

"""
A Balance for a specific virtual currency
"""
type VcBalance {
  amount: String
  currencyCode: String
  usdAmount: String
}

"""
A VirtualCurrencyEmoji
"""
type VirtualCurrencyEmoji {
  emoji: String!
  id: ID!
  sortOrder: Int!
}

"""
A request to withdraw money. Will initate a sell if necessary to raise cash
"""
type Withdrawal {
  clientTrackingId: String
  createdAt: ISO8601DateTime!
  deliveredAmount: Float
  financialTransactionId: ID
  id: ID!
  liquidate: Boolean
  note: String
  progressStatus: WithdrawalRequestProgressStatusEnum
  requestedAmount: Float
  status: WithdrawalRequestStatusEnum
}

"""
The connection type for Withdrawal.
"""
type WithdrawalConnection {
  """
  A list of edges.
  """
  edges: [WithdrawalEdge]
  """
  A list of nodes.
  """
  nodes: [Withdrawal]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  totalCount: Int!
}

"""
An edge in a connection.
"""
type WithdrawalEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!
  """
  The item at the end of the edge.
  """
  node: Withdrawal
}

enum WithdrawalRequestProgressStatusEnum {
  """
  Pending
  """
  PENDING
  """
  SharesSettling
  """
  SHARES_SETTLING
  """
  Transferring
  """
  TRANSFERRING
  """
  Complete
  """
  COMPLETE
  """
  Canceled
  """
  CANCELED
  """
  Error
  """
  ERROR
}

enum WithdrawalRequestStatusEnum {
  """
  Pending
  """
  pending
  """
  Redemption
  """
  redemption
  """
  Withdrawing
  """
  withdrawing
  """
  Successful
  """
  successful
  """
  Rejected
  """
  rejected
  """
  Error
  """
  error
}

schema {
  query: Query
  mutation: Mutation
}
